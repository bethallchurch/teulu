type User {
  id: ID!
  phoneNumber: String
  groups(filter: ModelGroupLinkFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelGroupLinkConnection
  createdAt: String
  updatedAt: String
}

type GroupLink {
  id: ID!
  user: User
  group: Group!
}

type Group {
  id: ID!
  name: String
  owner: String
  authUsers: [String]
  userLinks(filter: ModelGroupLinkFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelGroupLinkConnection
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  albums(filter: ModelAlbumFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAlbumConnection
  createdAt: String
  updatedAt: String
}

type Album {
  id: ID!
  name: String
  owner: String
  authUsers: [String]
  albumGroupId: ID
  group: Group
  photos(filter: ModelPhotoFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPhotoConnection
  createdAt: String
  updatedAt: String
}

enum MessageType {
  TEXT
  PHOTO
}

type Message {
  id: ID!
  owner: String
  authUsers: [String]
  type: MessageType
  text: String
  messageGroupId: ID
  group: Group
  photos(filter: ModelPhotoFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPhotoConnection
  createdAt: String
  updatedAt: String
}

type Photo {
  id: ID!
  owner: String
  authUsers: [String]
  bucket: String
  fullsize: PhotoS3Info
  thumbnail: PhotoS3Info
  message: Message
  album: Album
  createdAt: String
  updatedAt: String
}

type PhotoS3Info {
  key: String!
  width: Int!
  height: Int!
}

type Subscription {
  onCreateAlbum(albumGroupId: ID): Album @aws_subscribe(mutations: ["createAlbum"])
  onCreateMessage(messageGroupId: ID): Message @aws_subscribe(mutations: ["createMessage"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateGroupLink: GroupLink @aws_subscribe(mutations: ["createGroupLink"])
  onUpdateGroupLink: GroupLink @aws_subscribe(mutations: ["updateGroupLink"])
  onDeleteGroupLink: GroupLink @aws_subscribe(mutations: ["deleteGroupLink"])
  onCreateGroup: Group @aws_subscribe(mutations: ["createGroup"])
  onUpdateGroup: Group @aws_subscribe(mutations: ["updateGroup"])
  onDeleteGroup: Group @aws_subscribe(mutations: ["deleteGroup"])
  onCreatePhoto: Photo @aws_subscribe(mutations: ["createPhoto"])
  onUpdatePhoto: Photo @aws_subscribe(mutations: ["updatePhoto"])
  onDeletePhoto: Photo @aws_subscribe(mutations: ["deletePhoto"])
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelUserFilterInput {
  id: ModelIDFilterInput
  phoneNumber: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getGroupLink(id: ID!): GroupLink
  listGroupLinks(filter: ModelGroupLinkFilterInput, limit: Int, nextToken: String): ModelGroupLinkConnection
  getGroup(id: ID!): Group
  listGroups(filter: ModelGroupFilterInput, limit: Int, nextToken: String): ModelGroupConnection
  getAlbum(id: ID!): Album
  listAlbums(filter: ModelAlbumFilterInput, limit: Int, nextToken: String): ModelAlbumConnection
  getMessage(id: ID!): Message
  listMessages(filter: ModelMessageFilterInput, limit: Int, nextToken: String): ModelMessageConnection
  getPhoto(id: ID!): Photo
  listPhotos(filter: ModelPhotoFilterInput, limit: Int, nextToken: String): ModelPhotoConnection
}

input CreateUserInput {
  id: ID
  phoneNumber: String
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  id: ID!
  phoneNumber: String
  createdAt: String
  updatedAt: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createGroupLink(input: CreateGroupLinkInput!): GroupLink
  updateGroupLink(input: UpdateGroupLinkInput!): GroupLink
  deleteGroupLink(input: DeleteGroupLinkInput!): GroupLink
  createGroup(input: CreateGroupInput!): Group
  updateGroup(input: UpdateGroupInput!): Group
  deleteGroup(input: DeleteGroupInput!): Group
  createAlbum(input: CreateAlbumInput!): Album
  createMessage(input: CreateMessageInput!): Message
  createPhoto(input: CreatePhotoInput!): Photo
  updatePhoto(input: UpdatePhotoInput!): Photo
  deletePhoto(input: DeletePhotoInput!): Photo
}

type ModelGroupLinkConnection {
  items: [GroupLink]
  nextToken: String
}

input ModelGroupLinkFilterInput {
  id: ModelIDFilterInput
  and: [ModelGroupLinkFilterInput]
  or: [ModelGroupLinkFilterInput]
  not: ModelGroupLinkFilterInput
}

input CreateGroupLinkInput {
  id: ID
  groupLinkUserId: ID
  groupLinkGroupId: ID!
}

input UpdateGroupLinkInput {
  id: ID!
  groupLinkUserId: ID
  groupLinkGroupId: ID
}

input DeleteGroupLinkInput {
  id: ID
}

type ModelGroupConnection {
  items: [Group]
  nextToken: String
}

input ModelGroupFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  owner: ModelStringFilterInput
  authUsers: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelGroupFilterInput]
  or: [ModelGroupFilterInput]
  not: ModelGroupFilterInput
}

input CreateGroupInput {
  id: ID
  name: String
  owner: String
  authUsers: [String]
  createdAt: String
  updatedAt: String
}

input UpdateGroupInput {
  id: ID!
  name: String
  owner: String
  authUsers: [String]
  createdAt: String
  updatedAt: String
}

input DeleteGroupInput {
  id: ID
}

type ModelAlbumConnection {
  items: [Album]
  nextToken: String
}

input ModelAlbumFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  owner: ModelStringFilterInput
  authUsers: ModelStringFilterInput
  albumGroupId: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelAlbumFilterInput]
  or: [ModelAlbumFilterInput]
  not: ModelAlbumFilterInput
}

input CreateAlbumInput {
  id: ID
  name: String
  owner: String
  authUsers: [String]
  albumGroupId: ID
  createdAt: String
  updatedAt: String
}

input UpdateAlbumInput {
  id: ID!
  name: String
  owner: String
  authUsers: [String]
  albumGroupId: ID
  createdAt: String
  updatedAt: String
}

input DeleteAlbumInput {
  id: ID
}

type ModelMessageConnection {
  items: [Message]
  nextToken: String
}

input ModelMessageTypeFilterInput {
  eq: MessageType
  ne: MessageType
}

input ModelMessageFilterInput {
  id: ModelIDFilterInput
  owner: ModelStringFilterInput
  authUsers: ModelStringFilterInput
  type: ModelMessageTypeFilterInput
  text: ModelStringFilterInput
  messageGroupId: ModelIDFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input CreateMessageInput {
  id: ID
  owner: String
  authUsers: [String]
  type: MessageType
  text: String
  messageGroupId: ID
  createdAt: String
  updatedAt: String
}

input UpdateMessageInput {
  id: ID!
  owner: String
  authUsers: [String]
  type: MessageType
  text: String
  messageGroupId: ID
  createdAt: String
  updatedAt: String
}

input DeleteMessageInput {
  id: ID
}

input PhotoS3InfoInput {
  key: String!
  width: Int!
  height: Int!
}

type ModelPhotoConnection {
  items: [Photo]
  nextToken: String
}

input ModelPhotoFilterInput {
  id: ModelIDFilterInput
  owner: ModelStringFilterInput
  authUsers: ModelStringFilterInput
  bucket: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  updatedAt: ModelStringFilterInput
  and: [ModelPhotoFilterInput]
  or: [ModelPhotoFilterInput]
  not: ModelPhotoFilterInput
}

input CreatePhotoInput {
  id: ID
  owner: String
  authUsers: [String]
  bucket: String
  fullsize: PhotoS3InfoInput
  thumbnail: PhotoS3InfoInput
  createdAt: String
  updatedAt: String
  photoMessageId: ID
  photoAlbumId: ID
}

input UpdatePhotoInput {
  id: ID!
  owner: String
  authUsers: [String]
  bucket: String
  fullsize: PhotoS3InfoInput
  thumbnail: PhotoS3InfoInput
  createdAt: String
  updatedAt: String
  photoMessageId: ID
  photoAlbumId: ID
}

input DeletePhotoInput {
  id: ID
}

type User
  @model
  @auth(rules: [{ allow: owner, ownerField: "id", queries: null }]) {
  id: ID!
  phoneNumber: String
  groups: [GroupLink] @connection(name: "UserGroupLinks")
  createdAt: String
  updatedAt: String
}

type GroupLink
@model {
  id: ID!
  user: User @connection(name: "UserGroupLinks")
  group: Group! @connection(name: "GroupUserLinks")
}

type Group
  @model
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "authUsers", mutations: [update] }
  ]) {
  id: ID!
  name: String
  owner: String
  authUsers: [String]
  userLinks: [GroupLink] @connection(name: "GroupUserLinks")
  albums: [Album] @connection(name: "GroupAlbums")
  createdAt: String
  updatedAt: String
}

type Album
  @model
  @auth(rules: [
    { allow: owner },
    { allow: owner, ownerField: "authUsers", mutations: [update] }
  ]) {
  id: ID!
  name: String
  owner: String
  authUsers: [String]
  group: Group @connection(name: "GroupAlbums")
  messages: [Message] @connection(name: "AlbumMessages")
  createdAt: String
  updatedAt: String
}

enum MessageType {
  TEXT
  PHOTO
}

type Message
@model
@auth(rules: [
  { allow: owner }
  { allow: owner, ownerField: "authUsers", mutations: null, queries: [get, list] }
]) {
  id: ID!
  owner: String
  authUsers: [String]
  type: MessageType
  text: String
  album: Album @connection(name: "AlbumMessages")
  photos: [Photo] @connection(name: "MessagePhotos")
  createdAt: String
  updatedAt: String
}

type Photo
@model
@auth(rules: [
  { allow: owner }
  { allow: owner, ownerField: "authUsers", mutations: null, queries: [get, list] }
]) {
  id: ID!
  owner: String
  authUsers: [String]
  bucket: String
  fullsize: PhotoS3Info
  thumbnail: PhotoS3Info
  message: Message @connection(name: "MessagePhotos")
  createdAt: String
  updatedAt: String
}

type PhotoS3Info {
  key: String!
  width: Int!
  height: Int!
}
